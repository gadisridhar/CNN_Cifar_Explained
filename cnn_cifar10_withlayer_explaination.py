# -*- coding: utf-8 -*-
"""CNN_CIFAR10_WithLayer_Explaination.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RRbCMZDWEQf0b-mxSvAYQU4hHGg8kIAh
"""

from keras.models import  Sequential
from keras import models, layers
import tensorflow as tf
from keras.layers import Flatten, Dense, Conv2D, MaxPooling2D
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras import datasets
from keras.layers.core.activation import Activation
from sklearn.metrics import classification_report, confusion_matrix

(X_train,y_train),(X_test,y_test) = datasets.cifar10.load_data()

print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

print(y_train.shape)
print(y_train)
#CONVERT Y INTO 1 DIMENSIONAL ARRAY

# Train = 50000 images
# Test = 10000 images
# Image SIze = 32 * 32 pixel
# RGB pattern = 3

plt.imshow(X_train[140])

# CIFAR 10 = https://www.cs.toronto.edu/~kriz/cifar.html
# 10 CATEGORIES OF  IMAGE CATEGORIES LISTED

classes = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]

y_train = y_train.reshape(-1,)
print(y_train)
#CONVERT Y INTO 1 DIMENSIONAL ARRAY

y_test = y_test.reshape(-1,)
print(y_test)
#CONVERT Y INTO 1 DIMENSIONAL ARRAY

def plot_sample(X, y , index):
  plt.figure(figsize=(5,2))
  plt.imshow(X[index])
  plt.xlabel(classes[y[index]])

# #before data ormalization
# print(X_train)
# print(X_test)

# after normalization - WHy inorder to make it Gaussian in Nature
X_train = X_train / 255
X_test = X_test / 255
# print(X_train)
# print(X_test)

# Trying with CNN for Model evaluation in order to evaluate the mode performance
# Having CNN allows allows model to build COnvolutional networks with better feature extraction at COnvolution Layer
# Adding Relu acitvation to better compact the model
# maxppooling to  reduce the DATA dimension, shrinking the arrays to smaller arrays and then flatten the array to get the data for output

categoryCount = len(classes)
categoryCount

modelCNN = models.Sequential()

modelCNN.add(layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu', input_shape=(X_train.shape[1],X_train.shape[2],X_train.shape[3])))
modelCNN.add(layers.MaxPooling2D((2,2)))

modelCNN.add(layers.Conv2D(filters=64, kernel_size=(3,3), activation='relu'))
modelCNN.add(layers.MaxPooling2D((2,2)))

modelCNN.add(layers.Flatten())
modelCNN.add(layers.Dense(64, activation='relu'))
modelCNN.add(layers.Dense(categoryCount,activation='softmax'))

modelCNN.compile(optimizer='adam', metrics=['accuracy'], loss="sparse_categorical_crossentropy")

modelCNN.fit(X_train, y_train, epochs=10)

modelCNN.evaluate(X_test, y_test)
#MODEL  ACCURACY ON TEST DATA IS 67, VERY LOW WITH USING CNN

y_pred = modelCNN.predict(X_test)

y_pred_Multiclass = [np.argmax(data) for data in y_pred]

#TEST DATA : comparing YTEST and YPRED TEST based on results to see what percentage of True Postives were returned from first 10 results(# RESULT 100 ACCURATE FOR FIRST 10 DATA)
print(y_test[:10])
print(y_pred_Multiclass[:10])

#Classification Report TEST DATA
print(classification_report(y_test, y_pred_Multiclass))

y_predTrain = modelCNN.predict(X_train)
y_pred_MulticlassTrain = [np.argmax(data) for data in y_predTrain]

#Classification Report TRAIN DATA
print(classification_report(y_train, y_pred_MulticlassTrain))

#TRAIN DATA : comparing YTRAIN and YPRED TRAIN based on results to see what percentage of True Postives were returned from first 10 results(
    # RESULT 100 ACCURATE FOR FIRST 10 DATA)
print(y_train[:10])
print(y_pred_MulticlassTrain[:10])

plot_sample(X_test,y_test,5)

classes

# print(y_test[:10])
# [3 8 8 0 6 6 1 6 3 1]
# print(y_pred_Multiclass[:10])
# [3, 8, 8, 0, 6, 6, 1, 6, 3, 1]
classes[y_pred_Multiclass[5]]

#plot_sample(X_test,y_test,9) gave automobile as OUTPUT
#classes[y_pred_Multiclass[9]] gave automobile as OUTPUT

#plot_sample(X_test,y_test,5) gave frog as OUTPUT
#classes[y_pred_Multiclass[5]] gave frog as OUTPUT

# CONFUSION MATRIX FOR TEST DATA - DATA BEST ALIGNED AT DIAGONALS
confusion_matrix(y_test,y_pred_Multiclass)

# CONFUSION MATRIX FOR TEST DATA - DATA BEST ALIGNED AT DIAGONALS
confusion_matrix(y_train,y_pred_MulticlassTrain)

modelCNN.summary()